// About Parte II - Exercise 3:
// constants buttonClick and clickCounter and function countClicks should 
// not initially be called because they break JS without an opened browser

/*

Parte I
Agora voc√™ vai fazer alguns exerc√≠cios de fixa√ß√£o.

üöÄ Se liga nesse foguete!
Os exerc√≠cios destacados com üöÄ s√£o os fundamentais pra voc√™ ir bem no projeto!
Todos os exerc√≠cios v√£o contribuir com sua forma√ß√£o mas fique de olho nesses! üëÄ

1. üöÄ Altere as vari√°veis para respeitarem o escopo em que foram declaradas.

Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function;

Modifique as vari√°veis para que respeitem o escopo onde est√£o declaradas;

Modifique as concatena√ß√µes para template literals.

Copie o c√≥digo abaixo:
Copiar
      function testingScope(escopo) {
        if (escopo === true) {
          var ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
          ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
          console.log(ifScope);
        } else {
          var elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
          console.log(elseScope);
        }
        console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necess√°rio esta linha pode ser removida.
      }

      testingScope(true);

*/

const testingScope = (escopo) => {
  if (escopo === true) {
    let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
    ifScope = `${ifScope} √≥timo, fui utilizada no escopo !`;
    console.log(ifScope);
  } else {
    let elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
    console.log(elseScope);
  }
}

testingScope(true);

/*
2. üöÄ Crie uma fun√ß√£o que retorne um array em ordem crescente.
Copie o c√≥digo abaixo:
Copiar
    const oddsAndEvens = [13, 3, 4, 10, 7, 2];

    // Seu c√≥digo aqui.

    console.log(oddsAndEvens); // ser√° necess√°rio alterar essa linha üòâ

Crie uma fun√ß√£o que fa√ßa com que o array oddsAndEvens fique na ordem crescente;

Utilize o console.log e template literals para retornar a frase: 'Os n√∫meros 2,3,4,7,10,13 se
encontram ordenados de forma crescente!'.

Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>);
retorne a frase "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".

B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort(). Spoiler:
√â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.
 */

const oddsAndEvens = [13, 3, 4, 10, 7, 2];

const ascendingOrderWithSort = (arrayWithNumbers) => {
  const sortedArray = arrayWithNumbers.sort((a, b) => a - b);
  console.log(`Os n√∫meros ${sortedArray} se encontram ordenados de forma crescente!`); // inner function
  return sortedArray;
}

console.log(ascendingOrderWithSort(oddsAndEvens)); // ascending order with sort
console.log(`Os n√∫meros ${ascendingOrderWithSort(oddsAndEvens)} se encontram ordenados de forma crescente!`); // out of function


/* Parte II
Abaixo, voc√™ ver√° algumas especifica√ß√µes de algoritmos para desenvolver. √â fundamental que voc√™ utilize o que aprendeu sobre let, const, arrow functions, template literals e ternary operator.
1. Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.
Na matem√°tica, o fatorial de um n√∫mero inteiro e positivo N, representado por N!, √© o produto de todos os seus antecessores at√© o n√∫mero um. Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
B√¥nus (opcional): tente fazer o mesmo exerc√≠cio de forma recursiva. Spoiler: √â poss√≠vel resolver com uma linha usando ternary operator.
*/

const returnFactorial = (n) => {
  let result = 0;
  for (let i = n - 1; i > 0; i -= 1) {
    result += (n * i);
  }
  return result;
}

console.log(returnFactorial(4));

/*
2. Crie uma fun√ß√£o que receba uma frase e retorne a maior palavra.
Exemplo:
Copiar
      longestWord('Ant√¥nio foi no banheiro e n√£o sabemos o que aconteceu') // retorna 'aconteceu'
*/

const longestWord = (randomSentence) => {
  const splittedWords = randomSentence.split(' ');
  return splittedWords.reduce((acc, word) => word.length > acc.length ? acc = word : acc);
}

console.log(longestWord('Ant√¥nio foi no banheiro e n√£o sabemos o que aconteceu')); // retorna 'aconteceu'

/*
3. üöÄ Crie uma p√°gina com um contador de cliques
Sua p√°gina deve conter:
Um bot√£o ao qual ser√° associado um event listener;
Uma vari√°vel clickCount no arquivo JavaScript que acumule o n√∫mero de clicks no bot√£o;
Um campo no HTML que v√° atualizando a quantidade de clicks no bot√£o conforme a vari√°vel clickCount √© atualizada.
*/

const buttonClick = document.getElementById('button-click');
const clickCounter = document.getElementById('click-counter');
let points = 0;
clickCounter.innerText = points;

const countClicks = () => {
  buttonClick.addEventListener('click', () => {
    points += 1;
    clickCounter.innerText = points;
  })
}

countClicks();

/*
4. üöÄ Crie duas fun√ß√µes JavaScript com as seguintes especifica√ß√µes:
N√£o se esque√ßa de usar template literals
Fun√ß√£o 1: Escreva uma fun√ß√£o que substitua a letra 'x' em uma frase.
A fun√ß√£o dever√° receber um nome por par√¢metro;
Declare dentro da fun√ß√£o uma vari√°vel com o nome frase, do tipo const e com o valor igual a 'Tryber x aqui!';
A fun√ß√£o dever√° retornar uma nova frase onde o x da frase 'Tryber x aqui!' seja substitu√≠do pelo nome passado por par√¢metro.
Exemplo:
Par√¢metro: 'Bebeto'
Retorno: 'Tryber Bebeto aqui!'

*/

const returnStudentName = (studentName) => {
  const phrase = 'Tryber x aqui!';
  const changedPhrase = phrase.replace('x', studentName);
  return changedPhrase;
}

console.log(returnStudentName('Bebeto'));

/*
Fun√ß√£o 2: Escreva uma fun√ß√£o que ir√° receber o retorno da Fun√ß√£o 1 por par√¢metro e retornar√° uma nova string.
A fun√ß√£o dever√° receber o retorno da Fun√ß√£o 1 por par√¢metro;
Declare dentro da fun√ß√£o uma vari√°vel com o nome skills, do tipo const;
A vari√°vel skills dever√° ser um array contendo tr√™s strings com tecnologias que voc√™ j√° aprendeu.
Concatene o valor retornado da Fun√ß√£o 1, a frase 'Minhas tr√™s principais habilidades s√£o:' e o valor da vari√°vel skills.
Exemplo de retorno:
Tryber Bebeto aqui!
Minhas tr√™s principais habilidades s√£o:
JavaScript
HTML
CSS
 */

const returnStudentNameAndSkills = (studentIntroducingHimself) => {
  const skills = ['HTML', 'CSS', 'JS'];
  return `
  ${studentIntroducingHimself}
  Minhas principais habilidades s√£o:
  ${skills[0]}
  ${skills[1]}
  ${skills[2]}
  `;
}

console.log(returnStudentNameAndSkills(returnStudentName('Bebeto')));
